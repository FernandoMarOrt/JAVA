package ventanas;

import controladores.ClienteJpaController;
import controladores.HabitacionJpaController;
import controladores.ReservaJpaController;
import controladores.TarjetaDescuentoJpaController;
import controladores.exceptions.IllegalOrphanException;
import controladores.exceptions.NonexistentEntityException;
import entidades.Cliente;
import entidades.Habitacion;
import entidades.Reserva;
import entidades.TarjetaDescuento;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class gestionCopiasSeguridad extends javax.swing.JFrame {

    public gestionCopiasSeguridad() {
        initComponents();
        crearDirectorio("./copias");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaCopiasSeguridad = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaCopiasSeguridad1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaCopiasSeguridad2 = new javax.swing.JList<>();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(listaCopiasSeguridad);

        jScrollPane2.setViewportView(listaCopiasSeguridad1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(242, 230, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 100, 320));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagen1.png"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("GESTION COPIAS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 300, 50));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/banner.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 510, -1));

        jButton9.setBackground(new java.awt.Color(153, 102, 255));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("RESTAURAR COPIAS");
        jButton9.setActionCommand("");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 240, 200, 30));

        jButton10.setBackground(new java.awt.Color(153, 102, 255));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("COMPROBAR COPIAS");
        jButton10.setActionCommand("");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 200, 30));

        jButton11.setBackground(new java.awt.Color(153, 102, 255));
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("REALIZAR COPIAS");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 200, 30));

        jButton5.setBackground(new java.awt.Color(153, 102, 255));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Volver al inicio");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, -1, -1));

        jScrollPane3.setViewportView(listaCopiasSeguridad2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 280, 70));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("HOTELPG");
    private static final HabitacionJpaController hc = new HabitacionJpaController(emf);
    private static final ReservaJpaController rc = new ReservaJpaController(emf);
    private static final TarjetaDescuentoJpaController tc = new TarjetaDescuentoJpaController(emf);
    private static final ClienteJpaController cc = new ClienteJpaController(emf);


    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked

        // TODO add your handling code here:
        List<Reserva> listaReserva = rc.findReservaEntities();

        for (Reserva r : listaReserva) {

            try {
                rc.destroy(r.getId());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        List<Habitacion> listaHabitacion = hc.findHabitacionEntities();

        for (Habitacion h : listaHabitacion) {

            try {
                hc.destroy(h.getId());
            } catch (IllegalOrphanException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        
        
        
          List<Cliente> listaCliente = cc.findClienteEntities();
        for (Cliente c : listaCliente) {

            try {
                cc.destroy(c.getId());
            } catch (IllegalOrphanException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        List<TarjetaDescuento> listaTarjeta = tc.findTarjetaDescuentoEntities();
        for (TarjetaDescuento t : listaTarjeta) {

            try {
                tc.destroy(t.getId());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

      

        String copia = listaCopiasSeguridad2.getSelectedValue();
        String ruta = "./copias/" + copia + "/";
        restaurarTarjeta(ruta.concat("tarjeta.csv"), ";");
        restaurarCliente(ruta.concat("cliente.csv"), ";");
        restaurarHabitacion(ruta.concat("habitacion.csv"), ";");
        restaurarReserva(ruta.concat("reserva.csv"), ";");

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked

        listarDirectorio("./copias/");

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked

        List<Cliente> listaCliente = cc.findClienteEntities();
        List<Habitacion> listaHabitacion = hc.findHabitacionEntities();
        List<Reserva> listaReserva = rc.findReservaEntities();
        List<TarjetaDescuento> listaTarjetaDescuento = tc.findTarjetaDescuentoEntities();

        String momentoCopia = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy-HH'h'-mm'm'-ss's'"));
        String ruta = "./copias/".concat(momentoCopia);
        crearDirectorio(ruta);

        generarFicheroCliente(ruta, "cliente", listaCliente);
        generarFicheroHabitacion(ruta, "habitacion", listaHabitacion);
        generarFicheroTarjetaDescuento(ruta, "tarjeta", listaTarjetaDescuento);
        generarFicheroReserva(ruta, "reserva", listaReserva);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        ventanaInicio vI = new ventanaInicio();

        this.setVisible(false);

        // Posición de la ventana
        vI.setLocationRelativeTo(null);
        // La ventana no se puede redimensionar
        vI.setResizable(false);
        //hacemos la ventana visible
        vI.setVisible(true);
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gestionCopiasSeguridad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gestionCopiasSeguridad().setVisible(true);
            }
        });
    }

    public static void crearDirectorio(String rutaDirectorio) { //METODO PARA CREAR UN DIRECTORIO

        Path directorio = Paths.get(rutaDirectorio);

        if (!Files.exists(directorio)) { // Verificar si el directorio no existe
            try {
                Files.createDirectory(directorio); // Intentar crear el directorio

            } catch (IOException e) {

                JOptionPane.showMessageDialog(null, "Error al crear el directorio: " + e.getMessage());
            }
        }
    }

    public void listarDirectorio(String ruta) { //Metodo para listar el directorio

        List<String> copias = new ArrayList<>(); //Lista para almacenar las copias

        File directorio = new File(ruta); //Ruta de las copias

        if (directorio.exists()) { //Si existe las meto en la lista 

            File[] ficheros = directorio.listFiles();

            for (File file2 : ficheros) {

                copias.add(file2.getName());
            }

        } else {

            JOptionPane.showMessageDialog(null, "El directorio no existe.");
        }

        String[] listaCopias = copias.toArray(new String[0]);

        JComboBox<String> comboBox = new JComboBox<>(listaCopias);

        listaCopiasSeguridad2.setModel(comboBox.getModel());
    }

    public static void generarFicheroCliente(String ruta, String nomFichero, List<Cliente> listaCliente) {

        String idFichero = ruta + "/" + nomFichero + ".csv";
        String tmp;

        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : listaCliente) {

                tmp = f.toString();

                flujo.write(tmp);

                flujo.newLine();

            }
            flujo.flush();

        } catch (IOException e) {

            System.out.println(e.getMessage());
        }

    }

    public static void generarFicheroHabitacion(String ruta, String nomFichero, List<Habitacion> listaHabitacion) {

        String idFichero = ruta + "/" + nomFichero + ".csv";
        String tmp;

        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : listaHabitacion) {

                tmp = f.toString();

                flujo.write(tmp);

                flujo.newLine();

            }
            flujo.flush();

        } catch (IOException e) {

            System.out.println(e.getMessage());
        }

    }

    public static void generarFicheroReserva(String ruta, String nomFichero, List<Reserva> listaReserva) {

        String idFichero = ruta + "/" + nomFichero + ".csv";
        String tmp;

        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : listaReserva) {

                tmp = f.toString();

                flujo.write(tmp);

                flujo.newLine();

            }
            flujo.flush();

        } catch (IOException e) {

            System.out.println(e.getMessage());
        }

    }

    public static void generarFicheroTarjetaDescuento(String ruta, String nomFichero, List<TarjetaDescuento> listaTarjetaDescuento) {

        String idFichero = ruta + "/" + nomFichero + ".csv";
        String tmp;

        try ( BufferedWriter flujo = new BufferedWriter(new FileWriter(idFichero))) {

            for (Object f : listaTarjetaDescuento) {

                tmp = f.toString();

                flujo.write(tmp);

                flujo.newLine();

            }
            flujo.flush();

        } catch (IOException e) {

            System.out.println(e.getMessage());
        }

    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public void restaurarTarjeta(String ruta, String separador) {
        List<TarjetaDescuento> listaTarjeta = new ArrayList<>();
        int contador = 1;

        String[] tokens;
        String linea;

        TarjetaDescuento t = null;

        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer

            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String

                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la linea

                tokens = linea.split(separador);
                // Convierte en String tokens

                t = new TarjetaDescuento();

                t.setId(Integer.valueOf(tokens[0]));
                LocalDate fecha = LocalDate.parse(tokens[1]);
                Date fechaD = Utilidades.CreacionModificacionBorradoEntidades.localToDate(fecha);
                t.setFechaCaducidad(fechaD);

                listaTarjeta.add(t);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (TarjetaDescuento tarjeta : listaTarjeta) {
            tc.create(tarjeta);

        }

    }

    public void restaurarCliente(String ruta, String separador) {
        List<Cliente> listaCliente = new ArrayList<>();
        int contador = 1;

        String[] tokens;
        String linea;

        Cliente c = null;

        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer

            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String

                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la linea

                
                tokens = linea.split(separador);
                // Convierte en String tokens

                c = new Cliente();
                c.setId(Integer.valueOf(tokens[0]));
                c.setNombre(tokens[1]);
                c.setApellidos(tokens[2]);
                c.setDni(tokens[3]);

                c.setIdtarjetaD(tc.findTarjetaDescuento(Integer.valueOf(tokens[4])));
//                c.setActivo(Boolean.valueOf(tokens[5]));

                listaCliente.add(c);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Cliente cliente : listaCliente) {
            cc.create(cliente);

        }

    }

    public void restaurarHabitacion(String ruta, String separador) {
        List<Habitacion> listaHabitacion = new ArrayList<>();
        int contador = 1;

        // Variables para guardar los datos que se van leyendo
        String[] tokens;
        String linea;

        Habitacion h = null;

        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer
            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String

                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la linea

                tokens = linea.split(separador);
                // Convierte en String tokens

                h = new Habitacion();

                h.setId(Integer.valueOf(tokens[0]));
                h.setNumeroHabitacion(Integer.parseInt(tokens[1]));
                h.setNumeroCamas(Integer.parseInt(tokens[2]));
                h.setPiso(Integer.valueOf(tokens[3]));
                h.setAireAcondicionado(Boolean.valueOf(tokens[4]));
                h.setCalefaccion(Boolean.parseBoolean(tokens[5]));

                listaHabitacion.add(h);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Habitacion habitacion : listaHabitacion) {
            hc.create(habitacion);
        }

    }

    public void restaurarReserva(String ruta, String separador) {
        List<Reserva> listaReserva = new ArrayList<>();
        int contador = 1;

        // Variables para guardar los datos que se van leyendo
        String[] tokens;
        String linea;

        Reserva r = null;

        try ( Scanner datosFichero = new Scanner(new File(ruta), "UTF-8")) {
            // hasNextLine devuelve true mientras haya líneas por leer

            while (datosFichero.hasNextLine()) {
                // Guarda la línea completa en un String

                linea = datosFichero.nextLine();
                // Se guarda en el array de String cada elemento de la linea

                tokens = linea.split(separador);
                // Convierte en String tokens

                r = new Reserva();

                r.setId(Integer.valueOf(tokens[0]));
                r.setCliente(cc.findCliente(Integer.valueOf(tokens[1])));
                r.setHabitacion(hc.findHabitacion(Integer.valueOf(tokens[2])));

                LocalDate fechaEL = LocalDate.parse(tokens[3]);
                Date fechaE = Utilidades.CreacionModificacionBorradoEntidades.localToDate(fechaEL);
                r.setFechaEntrada(fechaE);

                LocalDate fechaFL = LocalDate.parse(tokens[4]);
                Date fechaF = Utilidades.CreacionModificacionBorradoEntidades.localToDate(fechaFL);
                r.setFechaFin(fechaF);

                r.setNumeroDias(Integer.valueOf(tokens[5]));
                r.setPrecio(Double.valueOf(tokens[6]));

                listaReserva.add(r);
            }
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        for (Reserva reserva : listaReserva) {
            rc.create(reserva);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listaCopiasSeguridad;
    private javax.swing.JList<String> listaCopiasSeguridad1;
    private javax.swing.JList<String> listaCopiasSeguridad2;
    // End of variables declaration//GEN-END:variables
}
